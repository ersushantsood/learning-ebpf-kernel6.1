// +build ignore
#include "../headers/vmlinux.h"
#include <bpf/bpf_endian.h>
#include <bpf/bpf_helpers.h>
#include <bpf/bpf_tracing.h>
//#include <uapi/linux/ptrace.h>
//#include <net/sock.h>
//#include <bcc/proto.h>
char __license[] SEC("license") = "GPL";

#define TC_ACT_OK 0
#define ETH_P_IP 0x0800 /* Internet Protocol packet */
#define ETH_HLEN 14 /*Ethernet Header Length */

#define max_path_len 20

static inline int is_http(struct __sk_buff *skb, __u64 nh_off);
static inline int bpf_strcmplength(char *s1, char *s2, u32 n);
static inline int bpf_strncmpoffset(char *s1, char *s2, u32 n, u32 o);

struct url_path {
  __u8 path_len;
  char path[max_path_len]; // This should be a char but code generation between here and Go..
};

struct {
  __uint(type, BPF_MAP_TYPE_HASH);
  __uint(max_entries, 1024);
  __type(key, char[max_path_len]);
  __type(value, struct url_path);
}
url_map SEC(".maps");

struct {
  __uint(type, BPF_MAP_TYPE_HASH);
  __uint(max_entries, 1024);
  __type(key, __u16);
  __type(value, __u16);
}
redirect_map SEC(".maps");

static inline void set_tcp_dport(struct __sk_buff *skb, int nh_off,
                                 __u16 old_port, __u16 new_port)
{
    bpf_l4_csum_replace(skb, nh_off + offsetof(struct tcphdr, check),
                        old_port, new_port, sizeof(new_port));
    bpf_skb_store_bytes(skb, nh_off + offsetof(struct tcphdr, dest),
                        &new_port, sizeof(new_port), 0);
}

static inline void set_tcp_sport(struct __sk_buff *skb, int nh_off,
                                 __u16 old_port, __u16 new_port)
{
    bpf_l4_csum_replace(skb, nh_off + offsetof(struct tcphdr, check),
                        old_port, new_port, sizeof(new_port));
    bpf_skb_store_bytes(skb, nh_off + offsetof(struct tcphdr, source),
                        &new_port, sizeof(new_port), 0);
}



SEC("tc_in")
int tc_ingress(struct __sk_buff * skb) {
    void *data_end = (void *)(long)skb->data_end;
    void *data = (void *)(long)skb->data;
    struct ethhdr *eth = data;
    __u16 h_proto;
    __u64 nh_off = 0;
    nh_off = sizeof(*eth);

    if (data + nh_off > data_end) {
        return TC_ACT_OK;
    }

    h_proto = eth->h_proto;

    if (h_proto == bpf_htons(ETH_P_IP)) {
        if (is_http(skb, nh_off) == 1) {
            bpf_printk("Found what we were looking for"); 
        }
    }

    return TC_ACT_OK;
}

SEC("tc_egress")
int tc_egress_(struct __sk_buff *skb)
{
    struct iphdr ip;
    struct tcphdr tcp;
    if (0 != bpf_skb_load_bytes(skb, sizeof(struct ethhdr), &ip, sizeof(struct iphdr)))
    {
        bpf_printk("bpf_skb_load_bytes iph failed");
        return TC_ACT_OK;
    }

    if (0 != bpf_skb_load_bytes(skb, sizeof(struct ethhdr) + (ip.ihl << 2), &tcp, sizeof(struct tcphdr)))
    {
        bpf_printk("bpf_skb_load_bytes eth failed");
        return TC_ACT_OK;
    }

    unsigned int src_port = bpf_ntohs(tcp.source);
    unsigned int dst_port = bpf_ntohs(tcp.dest);

    if (src_port == 80 || dst_port == 80 || src_port == 8090 || dst_port == 8090)
        bpf_printk("-> %pI4:%u -> %pI4:%u", &ip.saddr, src_port, &ip.daddr, dst_port);

    if (src_port != 8090)
        return TC_ACT_OK;
    if (tcp.rst) {
        bpf_printk("-> sending a reset");
        //__u16 port = 0;
        int update = bpf_map_update_elem(&redirect_map, &dst_port, &src_port, BPF_ANY);
        if (update !=0) {
            bpf_printk("-> couldnt update map");
        }

    }


    set_tcp_sport(skb, ETH_HLEN + sizeof(struct iphdr), bpf_htons(8090), bpf_htons(80));

    return TC_ACT_OK;
}


static inline int is_http(struct __sk_buff *skb, __u64 nh_off) {
    void *data_end = (void *)(long)skb->data_end;
    void *data = (void *)(long)skb->data;
    struct iphdr *iph = data + nh_off;

    if ((void*)(iph + 1) > data_end) {
        return 0;
    }

    if (iph->protocol != IPPROTO_TCP) {
        return 0;
    }
    __u32 tcp_hlen = 0;
    __u32 ip_hlen = 0;
    __u32 poffset = 0;
    __u32 plength = 0;
    __u32 ip_total_length = iph->tot_len;

    ip_hlen = iph->ihl << 2;

    if (ip_hlen < sizeof(*iph)) {
        return 0;
    }

    struct tcphdr *tcph = data + nh_off + sizeof(*iph);

    if ((void*)(tcph + 1) > data_end) {
        return 0;
    }
    unsigned int src_port = bpf_ntohs(tcph->source);
    __u16 dst_port = bpf_ntohs(tcph->dest);

    //if (src_port == 80) {
        __u16 *redirect = bpf_map_lookup_elem(&redirect_map, &src_port);
        if (redirect) {
            bpf_printk("<- hack that header for %d", dst_port);
            set_tcp_dport(skb, ETH_HLEN + sizeof(struct iphdr), bpf_htons(80), bpf_htons(8090));
            return TC_ACT_OK;
        }
    //}
    //     dst_port = bpf_htons(dst_port);
    //     redirect = bpf_map_lookup_elem(&redirect_map, &dst_port);
    //     if (redirect) {
    //         bpf_printk("INGRESS - hack that shit for %d", dst_port);
    //     }
    // }

    if (src_port == 80 || dst_port == 80 || src_port == 8090 || dst_port == 8090 )
        bpf_printk("<- %pI4:%u -> %pI4:%u", iph->saddr, src_port, iph->daddr, dst_port);

    tcp_hlen = tcph->doff << 2;
    poffset = ETH_HLEN + ip_hlen + tcp_hlen;
    plength = ip_total_length - ip_hlen - tcp_hlen;
    if (plength >= 7) {

        // Room to store 50 bytes of data from the packet
        char pdata[50];

        // Load data from the socket buffer, poffset starts at the end of the TCP Header
        int ret = bpf_skb_load_bytes(skb, poffset, pdata, 50);
        if (ret != 0) {
           return 0;
        }
        // Print out the entire HTTP request (debug)
        bpf_printk("%s", pdata);

        // Look for a GET request
        if (bpf_strcmplength(pdata, "GET", 3) == 0) {

  //      char path[max_path_len];
    //    int path_len = 0;
        struct url_path key;
        key.path_len = 0;
       // memset(key.path[0], 0, sizeof(key.path));
        // Find the request URI (starts at offset 4), ends with a space
        for (int i = 4; i < sizeof(pdata) ; i++)
        {
            if (pdata[i] != ' ') {
                key.path[i-4] = pdata[i];
            } else {
                key.path[i-4] = '\0';
                key.path_len = i-4;
                break;
            }
        }
        // Print out the Get request path
       // bpf_printk("<- incoming path [%s], length [%d]", path, path_len);
        //__builtin_memcpy(key.path, path, path_len);
        
       // key.path_len = path_len;
        bpf_printk("<- incoming path [%s]", key.path);
        struct url_path *found_path = bpf_map_lookup_elem(&url_map, &key.path);
        if (found_path > 0) {
            bpf_printk("WTF");
        }
        if (bpf_strncmpoffset(pdata, "/test", 5,4) == 0) {
                set_tcp_dport(skb, ETH_HLEN + sizeof(struct iphdr), bpf_htons(80), bpf_htons(8090));
                return 1;
            }
        }
    }

    return 0;
}

static inline int bpf_strcmplength(char *s1, char *s2, u32 n)
{
    for (int i = 0; i < n && i < sizeof(s1) && i < sizeof(s2); i++)
    {
        if (s1[i] != s2[i])
            return s1[i] - s2[i];

        if (s1[i] == s2[i] == '\0')
            return 0;
    }

    return 0;
}

static inline int bpf_strncmpoffset(char *s1, char *s2, u32 n, u32 o)
{
    for (int i = 0; i < n && i < sizeof(s1) && i < sizeof(s2); i++)
    {
        if (s1[i+o] != s2[i])
            return s1[i+o] - s2[i];

        if (s1[i+o] == s2[i] == '\0')
            return 0;
    }

    return 0;
}

// static inline int bpf_strcmp(char *s1, char *s2)
// {
//     u32 s1_size = sizeof(s1);
//     u32 s2_size = sizeof(s2);

//     return bpf_strncmp2(s1, s2, s1_size < s2_size ? s1_size : s2_size);
// }


// SEC("tc")
// int tc_ingress1(struct __sk_buff * skb) {

//   void *data_end = (void *)(long)skb->data_end;
//   void *data = (void *)(long)skb->data;
// //   struct tcphdr *tcph;
// //   struct iphdr *iph;
// //   struct ethhdr * eth = data;

// //   __u64 nh_off = sizeof( * eth);

// //   if (data + nh_off > data_end)
// //     return TC_ACT_OK;

// //   if (bpf_ntohs(eth->h_proto) != ETH_P_IP)
// //     return TC_ACT_OK;

// //   if (data + sizeof(*eth) + sizeof(*iph) > data_end)
// //     return TC_ACT_OK;

// //   iph = data + sizeof(*eth);
// //   if (iph->protocol != IPPROTO_TCP)
// //     return TC_ACT_OK;

// //   if (data + sizeof(*eth) + sizeof(*iph) + sizeof(*tcph) > data_end)
// //       return TC_ACT_OK;

// //   tcph = data + sizeof(*eth) + sizeof(*iph);

// //     if (__bpf_htons(tcph->source) != 80)
// //         return TC_ACT_OK;

// //   bpf_printk("packet %d to %d", __bpf_htons(tcph->dest), __bpf_htons(tcph->source));
	
// //     u32  tcp_header_length = 0;
// // 	u32  ip_header_length = 0;
// //     unsigned char *payload;
// // 	u32  payload_length = 0;
// //     ip_header_length = (iph->ihl) << 2;    //SHL 2 -> *4 multiply
// // 	tcp_header_length = (tcph->doff) << 2; //SHL 2 -> *4 multiply
// //    // char            * data1;
// //    // data1    = (char *)((unsigned char *)tcph + (tcph->doff * 4));

// //     payload = (unsigned char *)tcph + tcp_header_length;

// // 	//calculate payload offset and length
// //payload_offset = sizeof(*eth) + sizeof(*iph);
//  	//payload_length = __bpf_htons(iph->tot_len) - ip_header_length - tcp_header_length;
// // 	if(payload_length < 7) {
// // 		goto DROP;
// // 	}
// // 	//load first 7 byte of payload into p (payload_array)
// // 	//direct access to skb not allowed
// // 	unsigned long p[7];
// // 	int i = 0;
// // 	for (i = 0; i < 7; i++) {
		
// // 		//p[i] = skb->data + payload_offset+i;
// //             //bpf_skb_load_bytes(skb, payload_offset, &p[i], 1);
// // 	}
// 	// bpf_printk("%s", payload[0]);
// 	// bpf_printk("Total length: %d IP Header length: %d TCP Header: %d ",__bpf_htons(iph->tot_len), ip_header_length, tcp_header_length);
// // void *data_end = (void *)(long)ctx->data_end;
// //     void *data = (void *)(long)ctx->data;
//     void *head = data;
//     struct ethhdr *eth;
//     struct iphdr *iph;
//     // struct ipv6hdr *ip6h;
//     struct tcphdr *tcph;
//     uint16_t h_proto;
//     uint8_t *tcp_data;
//     // int nbzeros = 0;
//     // int i = 0;
//     // bool found = false;

//     eth = head;
//     if ((void *)eth + sizeof(struct ethhdr) >= data_end)
//         return TC_ACT_OK;
//     head += sizeof(struct ethhdr);

//     h_proto = eth->h_proto;
//     switch (h_proto)
//     {
//     case bpf_htons(ETH_P_IP):
//         iph = head;
//         if ((void *)iph + sizeof(struct iphdr) >= data_end)
//             return TC_ACT_OK;

//         h_proto = iph->protocol;

//         head += iph->ihl * 4;

//         break;

//     // case bpf_htons(ETH_P_IPV6):
//     //     ip6h = head;
//     //     if ((void *)ip6h + sizeof(struct ipv6hdr) >= data_end)
//     //         return TC_ACT_OK;

//     //     h_proto = ip6h->nexthdr;

//     //     head += sizeof(struct ipv6hdr);

//     //     break;

//     default:
//         return TC_ACT_OK;
//     }

//     if (h_proto != IPPROTO_TCP)
//         return TC_ACT_OK;

//     tcph = head;
//     if ((void *)tcph + sizeof(*tcph) > data_end)
//         return TC_ACT_OK;
//     head += sizeof(*tcph);

//     head += tcph->doff * 4;

//     if (head + tcph->doff * 4 > data_end) {
//             bpf_printk("doff %d, offset %d, size %d", tcph->doff, head, data_end);
//         return TC_ACT_OK;

//     }

//     // if (tcph->dest != 4420)
//     //     return TC_ACT_OK;

//     tcp_data = head;

//     // 1500 is the typical MTU size
//     // #define MAX_ITER 1500

//     // for (i = 0; i < MAX_ITER; i++)
//     // {
//     //     if ((void *)tcp_data + i + 1 >= data_end)
//     //         return TC_ACT_OK;

//     //     if (tcp_data[i] == 0)
//     //     {
//     //         nbzeros++;
//     //         continue;
//     //     }

//     //     found = true;
//     //     break;
//     // }

//     // if (found && nbzeros > 50)
//     // {
//     //     bpf_printk("found nvme pdu tail seq=%u\n", bpf_ntohs(tcph->seq));
//     // }

// //     return TC_ACT_OK;
// // }
//     bpf_printk("port %d", tcph->dest);

// 	//find a match with an HTTP message
// 	//HTTP
// 	// if ((void *)tcp_data[4]+1 >= data_end) {
//     //         return TC_ACT_OK;
// 	// } else if ((tcp_data[0] == 'H') && (tcp_data[1] == 'T') && (tcp_data[2] == 'T') && (tcp_data[3] == 'P')) {
//     //    bpf_printk("woah");
// 	//  }
//     if ((void *)tcp_data +1 <= data_end) {
//         if (tcp_data[0] == 'H') {
//         bpf_printk("woah");

//         }
//         bpf_printk("woah");

//     }
// 	//GET
// 	// if ((p[0] == 'G') && (p[1] == 'E') && (p[2] == 'T')) {
// 	// 	goto KEEP;
// 	// }
// 	// //POST
// 	// if ((p[0] == 'P') && (p[1] == 'O') && (p[2] == 'S') && (p[3] == 'T')) {
// 	// 	goto KEEP;
// 	// }
// 	// //PUT
// 	// if ((p[0] == 'P') && (p[1] == 'U') && (p[2] == 'T')) {
// 	// 	goto KEEP;
// 	// }
// 	// //DELETE
// 	// if ((p[0] == 'D') && (p[1] == 'E') && (p[2] == 'L') && (p[3] == 'E') && (p[4] == 'T') && (p[5] == 'E')) {
// 	// 	goto KEEP;
// 	// }
// 	// //HEAD
// 	// if ((p[0] == 'H') && (p[1] == 'E') && (p[2] == 'A') && (p[3] == 'D')) {
// 	// 	goto KEEP;
// 	// }
// 	//no HTTP match
// 	// goto DROP;
// 	// //keep the packet and send it to userspace returning -1
// 	// KEEP:
//     // bpf_printk("incoming %pI4, protocol: %u",&(iph -> daddr), iph -> protocol);

// 	// return -1;
// 	// //drop the packet returning 0
// 	// DROP:
// 	return 0;
// }
